basePath: /api/v1
definitions:
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
    type: object
  utils.APIResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
      meta: {}
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swiftshare.com
    name: API Support
    url: https://github.com/manjurulhoque/swift-share
  description: Professional file sharing platform API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Swift Share API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user (mainly for audit purposes)
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get the current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update the current user's profile information
      parameters:
      - description: User profile update information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
