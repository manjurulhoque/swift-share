basePath: /api/v1
definitions:
  models.FileUpdateRequest:
    properties:
      description:
        maxLength: 500
        type: string
      is_public:
        type: boolean
      is_starred:
        type: boolean
      tags:
        maxLength: 255
        type: string
    type: object
  models.FolderCreateRequest:
    properties:
      color:
        description: hex color
        type: string
      name:
        maxLength: 255
        type: string
      parent_id:
        type: string
    required:
    - name
    type: object
  models.FolderMoveRequest:
    properties:
      parent_id:
        type: string
    type: object
  models.FolderUpdateRequest:
    properties:
      color:
        type: string
      name:
        maxLength: 255
        type: string
    required:
    - name
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.ShareLinkAccessRequest:
    properties:
      password:
        type: string
    type: object
  models.ShareLinkCreateRequest:
    properties:
      allow_download:
        type: boolean
      expires_at:
        type: string
      file_id:
        type: string
      folder_id:
        type: string
      password:
        minLength: 6
        type: string
      permission:
        allOf:
        - $ref: '#/definitions/models.ShareLinkPermission'
        enum:
        - view
        - comment
        - edit
    required:
    - permission
    type: object
  models.ShareLinkPermission:
    enum:
    - view
    - comment
    - edit
    type: string
    x-enum-varnames:
    - PermissionView
    - PermissionComment
    - PermissionEdit
  models.ShareLinkUpdateRequest:
    properties:
      allow_download:
        type: boolean
      expires_at:
        type: string
      is_active:
        type: boolean
      password:
        minLength: 6
        type: string
      permission:
        allOf:
        - $ref: '#/definitions/models.ShareLinkPermission'
        enum:
        - view
        - comment
        - edit
    type: object
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
    type: object
  utils.APIResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
      meta: {}
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swiftshare.com
    name: API Support
    url: https://github.com/manjurulhoque/swift-share
  description: Professional file sharing platform API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Swift Share API
  version: "1.0"
paths:
  /admin/stats:
    get:
      consumes:
      - application/json
      description: Get comprehensive system statistics including users, files, shares,
        and downloads
      produces:
      - application/json
      responses:
        "200":
          description: System statistics retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get system statistics
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all users with filtering options
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search term for user name or email
        in: query
        name: search
        type: string
      - description: Filter by status (active, inactive, all)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Log out the current user (mainly for audit purposes)
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get the current user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update the current user's profile information
      parameters:
      - description: User profile update information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Register a new user
      tags:
      - auth
  /files:
    get:
      consumes:
      - application/json
      description: Get a paginated list of user's files
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search term for file name or description
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Files retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user files
      tags:
      - files
  /files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a file and its physical file from disk
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File deleted successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete a file
      tags:
      - files
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get a specific file
      tags:
      - files
    put:
      consumes:
      - application/json
      description: Update file description, tags, or public status
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: File update information
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/models.FileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: File updated successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update file information
      tags:
      - files
  /files/{id}/download:
    get:
      consumes:
      - application/json
      description: Download a file by ID
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File content
          schema:
            type: file
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Download a file
      tags:
      - files
  /files/{id}/history:
    get:
      consumes:
      - application/json
      description: Get access history for a specific file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of access records to return (default: 50, max: 200)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: File access history retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get file access history
      tags:
      - files
  /files/{id}/presigned-url:
    post:
      consumes:
      - application/json
      description: Returns a time-limited pre-signed URL to download the file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: Expiration in minutes (default 15)
        in: query
        name: expiration
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Presigned URL generated
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Generate a pre-signed download URL for a file
      tags:
      - files
  /files/recent:
    get:
      consumes:
      - application/json
      description: Get a list of files recently accessed by the user
      parameters:
      - description: 'Number of recent files to return (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recent files retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get recently accessed files
      tags:
      - files
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to the system
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - description: File description
        in: formData
        name: description
        type: string
      - description: File tags
        in: formData
        name: tags
        type: string
      - description: Make file public
        in: formData
        name: is_public
        type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: File uploaded successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Upload a file
      tags:
      - files
  /files/upload-multiple:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple files to the system with concurrent processing
      parameters:
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      - description: File description
        in: formData
        name: description
        type: string
      - description: File tags
        in: formData
        name: tags
        type: string
      - description: Make files public
        in: formData
        name: is_public
        type: boolean
      - description: Recipients email addresses
        in: formData
        name: recipients
        type: string
      - description: Message for recipients
        in: formData
        name: message
        type: string
      - description: Expiry days for share links
        in: formData
        name: expiry_days
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Files uploaded successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Upload multiple files
      tags:
      - files
  /folders:
    get:
      consumes:
      - application/json
      description: Get a paginated list of folders and files in the specified directory
      parameters:
      - description: Parent folder ID (empty for root)
        in: query
        name: parent_id
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search term for folder/file names
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Directory contents retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get folders and files in a directory
      tags:
      - folders
    post:
      consumes:
      - application/json
      description: Create a new folder in the specified parent folder
      parameters:
      - description: Folder creation data
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/models.FolderCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Folder created successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "409":
          description: Folder already exists
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new folder
      tags:
      - folders
  /folders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a folder and all its contents
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder deleted successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid folder ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete a folder
      tags:
      - folders
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific folder
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid folder ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get a specific folder
      tags:
      - folders
    put:
      consumes:
      - application/json
      description: Update folder name and color
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      - description: Folder update information
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/models.FolderUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder updated successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update folder information
      tags:
      - folders
  /folders/{id}/move:
    post:
      consumes:
      - application/json
      description: Move a folder to a different parent folder
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      - description: Move operation data
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/models.FolderMoveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Folder moved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Move folder to a different parent
      tags:
      - folders
  /public/share/{token}:
    get:
      consumes:
      - application/json
      description: Get basic information about a public share (no password required)
      parameters:
      - description: Share Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Share info retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Share not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "410":
          description: Share expired
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Get public share info
      tags:
      - public
    post:
      consumes:
      - application/json
      description: Access a public share link (no authentication required)
      parameters:
      - description: Share Token
        in: path
        name: token
        required: true
        type: string
      - description: Password if required
        in: body
        name: request
        schema:
          $ref: '#/definitions/models.ShareLinkAccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Share accessed successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid token or password
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Share not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "410":
          description: Share expired
          schema:
            $ref: '#/definitions/utils.APIResponse'
      summary: Access public share
      tags:
      - public
  /share:
    get:
      consumes:
      - application/json
      description: Get all share links created by the current user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Share links retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user's share links
      tags:
      - sharing
    post:
      consumes:
      - application/json
      description: Create a public share link for a file or folder
      parameters:
      - description: Share link details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShareLinkCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Share link created successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new share link
      tags:
      - sharing
  /share/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing share link
      parameters:
      - description: Share Link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Share link deleted successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid share link ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Share link not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete share link
      tags:
      - sharing
    get:
      consumes:
      - application/json
      description: Get details of a specific share link
      parameters:
      - description: Share Link ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Share link retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid share link ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Share link not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get share link details
      tags:
      - sharing
    put:
      consumes:
      - application/json
      description: Update settings of an existing share link
      parameters:
      - description: Share Link ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated share link settings
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ShareLinkUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Share link updated successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Share link not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Update share link
      tags:
      - sharing
  /share/stats:
    get:
      consumes:
      - application/json
      description: Get sharing statistics for the current user
      produces:
      - application/json
      responses:
        "200":
          description: Share statistics retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get sharing statistics
      tags:
      - sharing
  /trash:
    get:
      consumes:
      - application/json
      description: Get all files and folders in trash for the current user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trashed items retrieved successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all trashed items
      tags:
      - trash
  /trash/empty:
    delete:
      consumes:
      - application/json
      description: Permanently delete all items in trash (cannot be undone)
      produces:
      - application/json
      responses:
        "200":
          description: Trash emptied successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Empty trash
      tags:
      - trash
  /trash/files/{id}:
    post:
      consumes:
      - application/json
      description: Move a file to trash (soft delete)
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File moved to trash successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Move file to trash
      tags:
      - trash
  /trash/files/{id}/permanent:
    delete:
      consumes:
      - application/json
      description: Permanently delete a file from trash (cannot be undone)
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File permanently deleted
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found in trash
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Permanently delete file
      tags:
      - trash
  /trash/files/{id}/restore:
    post:
      consumes:
      - application/json
      description: Restore a file from trash
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File restored successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: File not found in trash
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Restore file from trash
      tags:
      - trash
  /trash/folders/{id}:
    post:
      consumes:
      - application/json
      description: Move a folder and all its contents to trash (soft delete)
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder moved to trash successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid folder ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Move folder to trash
      tags:
      - trash
  /trash/folders/{id}/permanent:
    delete:
      consumes:
      - application/json
      description: Permanently delete a folder and all its contents from trash (cannot
        be undone)
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder permanently deleted
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid folder ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found in trash
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Permanently delete folder
      tags:
      - trash
  /trash/folders/{id}/restore:
    post:
      consumes:
      - application/json
      description: Restore a folder and all its contents from trash
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder restored successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid folder ID
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "404":
          description: Folder not found in trash
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - BearerAuth: []
      summary: Restore folder from trash
      tags:
      - trash
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
